/*
Описание теста:

Задание 19. Реализовать многослойную архитектуру. Переделайте
созданный в задании 13 сценарий для добавления товаров в корзину
и удаления товаров из корзины, чтобы он использовал многослойную архитектуру.

А именно, выделите вспомогательные классы для работы
с главной страницей (откуда выбирается товар),
для работы со страницей товара (откуда происходит добавление товара в корзину),
со страницей корзины (откуда происходит удаление),
и реализуйте сценарий, который не напрямую обращается к операциям Selenium,
а оперирует вышеперечисленными объектами-страницами.

1) открыть главную страницу.
2) открыть первый товар из списка.
3) добавить его в корзину (при этом может случайно добавиться
товар, который там уже есть, ничего страшного).
4) подождать, пока счётчик товаров в корзине обновится.
5) вернуться на главную страницу, повторить предыдущие шаги ещё
два раза, чтобы в общей сложности в корзине было 3 единицы товара.
6) открыть корзину (в правом верхнем углу кликнуть по ссылке Checkout).
7) удалить все товары из корзины один за другим, после
каждого удаления подождать, пока внизу обновится таблица.
*/

package test_litecart.BasketTest_PageObject_3levels.tests;

import org.junit.Test;

public class BasketTest extends TestBase {

    @Test
    public void action(){
        System.out.print("\n\n***** Внутри метода action() *****\n\n");

        app.addOneProductToBasket(); // добавим в приложении 1 товар в корзину
        app.addOneProductToBasket(); // добавим в приложении 1 товар в корзину
        app.addOneProductToBasket(); // добавим в приложении 1 товар в корзину

        app.deleteAllProductsFromBasket(); // очистим в приложении корзину

    }
}
